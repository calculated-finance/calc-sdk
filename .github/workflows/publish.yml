name: Publish on merge

on:
  push:
    branches: [master]

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Detect version change
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          NEW=$(node -p "require('./package.json').version")
          BEFORE="${{ github.event.before }}"
          if [ -z "${BEFORE}" ] || ! git cat-file -e "${BEFORE}^{commit}" 2>/dev/null; then
            # First run or unknown base; treat as changed to allow initial publish
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "version=$NEW" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if git show "${BEFORE}:package.json" > /tmp/oldpkg.json 2>/dev/null; then
            OLD=$(node -e "console.log(JSON.parse(require('fs').readFileSync('/tmp/oldpkg.json','utf8')).version)")
          else
            OLD=""
          fi
          if [ "$NEW" != "$OLD" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi
          echo "version=$NEW" >> "$GITHUB_OUTPUT"

      - name: Install deps
        if: steps.ver.outputs.changed == 'true'
        run: bun install

      - name: Typecheck
        if: steps.ver.outputs.changed == 'true'
        run: bun run typecheck

      - name: Tests
        if: steps.ver.outputs.changed == 'true'
        run: bun test

      - name: Build
        if: steps.ver.outputs.changed == 'true'
        run: bun run build

      - name: Publish to npm
        if: steps.ver.outputs.changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --provenance --access public

      - name: Create GitHub Release
        if: steps.ver.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.ver.outputs.version }}';
            const tag = `v${version}`;
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                target_commitish: context.sha,
                name: tag,
                body: `Release ${tag}`,
                draft: false,
                prerelease: false
              });
              core.info(`Created release ${tag}`);
            } catch (e) {
              if (e.status === 422) {
                core.info(`Release ${tag} already exists; skipping`);
              } else {
                throw e;
              }
            }
